is ifft normalizing correctly?
	seems like factor 8 for N=2048 which doesn't make a lot of sense.... 32 (sqrt N) would make a lot more sense
is offset 0 DC?
	no. that seems a little weird :)
	should have documented the fft code better
interpolator specs are wrong
phase needs to be transformed to wavetable movement
impulse normalization -- center==1? normalize each?
ensure that group delays work on interp... currently 6 samples it seems
We can do a little better in the FIR filter iteration by lowering limits a bit when constraining, but not when computing error. This will make it converge faster. Supposedly.

the *= operator in complex_t is WRONG, does not do complex multiplication, but multiplies components




create function_call_statement
ASSERTS not working :)
delayed initialization of nodeInstances, to spare bytecode iterator?

in the VM, unify global load/store/reset with pointer and size stuff

Compiler pos errors
		Grab pos on everything
		Convert pos to line/col
Parser pos error
String line must require newline

error checking for out statements is a little wobbly, can be simplified
split compiler.lua into subparts?

db, semis, % suffix, ms

are return types always "sample"? check return_statement bytecode generation

Test Projects

crash on exit from host: NO HEADWAY ON THIS SO FAR

specify if functions can be called in both master and voice sections (e.g. adsrgain)





Checklist for new node:
	Add opcode to compiler
	Add function def to compiler as either function or method
	Add opcode to vm
	Include files in project
	Add header to pch
	Check that class is in invader namespace
	Handle opcode in node generation
	Handle opcode is bytecode iterator

MANUAL
ADSR or other envelope is required